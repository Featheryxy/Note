<?xml version="1.0" encoding="UTF-8"?>
<!--是所有pom.xml的根元素，并且在里面定义了命名空间和xsd元素-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!-- 基本设置 -->
    <parent> <!--父项目的标签，包含可以定位父项目的坐标-->
        <artifactId>parent</artifactId>
        <groupId>com.mylove</groupId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../parent</relativePath> <!--父元素的相对路径-->
    </parent>
    <modelVersion>4.0.0</modelVersion> <!--当前pom模型的版本-->
	
    <groupId>com.lv</groupId> <!--定义当前maven项目隶属的实际项目，并会根据这给项目建立包结构-->
    <artifactId>testMaven</artifactId> <!--定义项目中的某个模块名称，如果只有一个模块那就是项目的名称-->
    <version>1.0-SNAPSHOT</version> <!--定义maven项目当前所处的版本号，默认0.0.1-SNAPSHOT为快照版本-->
    <packaging>pom</packaging> <!--定义maven项目的打包方式，可以是jar包、war包、pom-->
	
    <properties> <!--定义属性-->
        <mysql.version>8.0.17</mysql.version>  <!--定义版本号-->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <!--定义编码-->
    </properties>
	
	<modules><!-- 模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的
                 相对路径 -->
        <module></module><!--子项目相对路径-->
    </modules>
	
    <dependencies> <!--包的依赖管理-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql.version}</version>
        </dependency>

        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>7.1.0</version>
            <scope>test</scope>
            <!--依赖范围 可选值:compile（默认）、test、provided、runtime、system、import。如果不设置scope，则默认scope的范围是compile。-->
            <!--compile范围依赖的JAR包，可以在主程序中（src/main/java包下）使用，也可以在测试程序中（src/test/java包下）使用。-->
            <!--test范围依赖的JAR包，只可以在测试程序中（src/test/java包下）使用，在主程序中是无法使用的。-->
            <!--provided 表明该包只在编译和测试的时候使用，部署阶段并不使用，最常用的一个案例就是javax.servlet-api和jsp-api，
                         web项目在开发阶段，会使用到servlet-api，部署阶段并不需要使用，因为servlet容器，
                         如Tomcat内部已经集成了servlet-api，如果部署阶段也将servlet依赖打包到项目中，则部署的时候会和Tomcat内部的servlet-api冲突。
                         所以在使用maven构建的web项目中，依赖servlet-api时，要修改其依赖范围为<scope>provided</scope>。-->
            <!--runtime：在测试、运行的时候依赖，在编译的时候不依赖。例如：JDBC驱动，项目代码只需要jdk提供的jdbc接口，
                         只有在执行测试和运行项目的时候才需要实现jdbc的功能。-->
            <!--system   系统依赖范围。该依赖范围与provided所表示的依赖范围一致，对于编译和测试有效，但在运行时无效。
                         只是使用system范围依赖时必须通过systemPath元素显式地指定依赖文件的路径。
                         由于此类依赖不是通过Maven仓库解析的，而且往往与本机系统绑定，可能造成构建的不可移植，
                         因此应该谨慎使用，systemPath元素可以引用环境变量-->
            <!-- 示例:
            <dependency>
                 <groupId>org.testng</groupId>
                 <artifactId>testng</artifactId>
                 <version>7.1.0</version>
                 <scope>system</scope>
                 <systemPath>${java.home}/lib/rt.jar</systemPath>
             </dependency>
             -->
            <!--import 导入依赖范围。该依赖范围不会对三种classpath产生实际的影响。-->
            <!--<type>依赖类型</type> 对应于项目坐标定义的packaging。大部分情况下，该元素不必声明，其默认值是jar。-->
            <!--<optional>标记依赖是否可选</optional>-->
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>4.3.6.RELEASE</version>
            <!--spring-core默认依赖了commons-logging作为底层日志，但我们并不想使用它默认的底层日志，这个时候可以使用<exclusions><exclusion>进行排除。-->
            <exclusions>
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>
	
    <!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖
        （必须描述group ID和artifact ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过
            group ID和artifact ID匹配到这里的依赖，并使用这里的依赖信息。 -->
    <dependencyManagement> <!--版本统一声明，声明子模块的版本号-->
        <dependencies>
            <dependency>
                <groupId>com.tellme</groupId>
                <artifactId>mm-web</artifactId>
                <version>1.0-SNAPSHOT</version>
            </dependency>  <dependency>
            <groupId>com.tellme</groupId>
            <artifactId>mm-service</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>  <dependency>
            <groupId>com.tellme</groupId>
            <artifactId>mm-repo</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
            <dependency>
                <groupId>com.tellme</groupId>
                <artifactId>mm-entity</artifactId>
                <version>1.0-SNAPSHOT</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
	


    <!-- 构建项目需要的信息 -->
    <build>
        <sourceDirectory>./mulu</sourceDirectory> <!-- 该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 -->
        <scriptSourceDirectory>./mulu</scriptSourceDirectory><!-- 该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容会
                                                            被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。 -->
        <testSourceDirectory>./mulu</testSourceDirectory><!-- 该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。
                                                        该路径是相对于pom.xml的相对路径。 -->
        <outputDirectory>./mulu</outputDirectory><!-- 被编译过的应用程序class文件存放的目录。 -->
        <testOutputDirectory>./mulu</testOutputDirectory><!-- 被编译过的测试class文件存放的目录。 -->
        <extensions> <!-- 使用来自该项目的一系列构建扩展 -->
            <extension> <!-- 描述使用到的构建扩展。 -->
                <groupId>mysql</groupId> <!-- 构建扩展的groupId -->
                <artifactId>mysql-connector-java</artifactId> <!-- 构建扩展的artifactId -->
                <version>${mysql.version}</version> <!-- 构建扩展的版本 -->
            </extension>
        </extensions>
        <defaultGoal>install</defaultGoal> <!-- 执行build任务时，如果没有指定目标，将使用的默认值，如<defaultGoal>install</defaultGoal>，在命令行中执行mvn，则相当于执行mvn install -->
        <resources><!-- 这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在
                        最终的打包文件里。 -->
            <resource><!-- 这个元素描述了项目相关或测试相关的所有资源路径 -->
                <targetPath>./mulu</targetPath><!-- 描述了资源的目标路径。该路径相对target/classes目录（例如${project.build.outputDirectory}）。
                                              举个例子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为
                                              org/apache/maven/messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 -->
                <filtering>false</filtering> <!-- 是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。构建过程中是否对资源进行过滤，默认false。 -->
                <directory>./mulu</directory> <!-- 描述存放资源的目录，该路径相对POM路径，资源文件源路径，默认位于${basedir}/src/main/resources/目录下。 -->
                <includes><!-- 包含的模式列表，例如**/*.xml.一组文件名的匹配模式，被匹配的资源文件将被构建过程处理。 -->
                    <include></include>
                </includes>
                <excludes> <!-- 排除的模式列表，例如**/*.xml 一组文件名的匹配模式，被匹配的资源文件将被构建过程忽略。同时也被includes的文件依然被忽略。-->
                    <exclude></exclude>
                </excludes>
            </resource>
        </resources>
        <testResources><!-- 这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。 -->
            <testResource><!-- 这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明，
                                test过程中涉及的资源文件，默认位于${basedir}/src/test/resources/目录下，它们不会被构建到目标构件中。 -->
                <targetPath>./mulu</targetPath><!-- 描述了测试相关的资源的目标路径。该路径相对target/classes目录（例如${project.build.outputDirectory}）。
                                              举个例子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为
                                              org/apache/maven/messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 -->
                <filtering></filtering><!-- 是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。 -->
                <directory>./mulu</directory><!-- 描述存放测试相关的资源的目录，该路径相对POM路径 -->
                <includes><!-- 包含的模式列表，例如**/*.xml. -->
                    <include></include>
                </includes>
                <excludes> <!-- 排除的模式列表，例如**/*.xml -->
                    <exclude></exclude>
                </excludes>
            </testResource>
        </testResources>
        <directory>./mulu</directory><!-- 构建产生的所有文件存放的目录 -->
        <finalName>${artifactId}-${version}</finalName><!-- 产生的构件的文件名(打包文件名)，默认值是${artifactId}-${version}。 -->
        <filters></filters><!-- 当filtering开关打开时，使用到的过滤器属性文件列表，
                                给出对资源文件进行过滤的属性文件的路径，默认位于${basedir}/src/main/filters/目录下。
                                属性文件中定义若干了键值对，用于在构建过程中将资源文件中出现的变量（键）替换为对应的值。 -->
        <pluginManagement><!-- 子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置 -->
            <plugins><!-- 使用的插件列表 。 -->
                <plugin><!-- plugin元素包含描述插件所需要的信息。 -->
                    <groupId>org.apache.maven.plugins</groupId><!-- 插件在仓库里的group ID -->
                    <artifactId>maven-compiler-plugin</artifactId><!-- 插件在仓库里的artifact ID -->
                    <version>3.1</version><!-- 被使用的插件的版本（或版本范围） -->
                    <extensions>true</extensions><!-- 是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该
                                                            元素才被设置成enabled。是否加载该插件的扩展，默认false。 -->
                    <executions><!-- 在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 -->
                        <execution><!-- execution元素包含了插件执行需要的信息 -->
                            <id>one</id><!-- 执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 -->
                            <phase>verify</phase><!-- 绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段,声明goals执行的时期，例如：verify -->
                            <goals></goals><!-- 配置的执行目标 -->
                            <inherited>true/false</inherited> <!-- 配置是否被传播到子POM -->
                            <configuration></configuration> <!-- 作为DOM对象的配置,设置execution下列表的goals的设置，而不是plugin所有的goals的设置 -->
                        </execution>
                    </executions>
                    <dependencies> <!-- 项目引入插件所需要的额外依赖 -->
                        <dependency>
                            <groupId>mysql</groupId>
                            <artifactId>mysql-connector-java</artifactId>
                            <version>${mysql.version}</version>
                        </dependency>
                    </dependencies>
                    <inherited>true</inherited><!-- 任何配置是否被传播到子项目，该插件的configuration中的配置是否可以被继承（继承该pom中的其他maven项目），默认true。 -->
                    <configuration><!-- 作为DOM对象的配置，该插件所需要的特殊配置，在父子项目之间可以覆盖或合并。 -->
                        <source>1.7</source> <!-- 源代码使用的开发版本 -->
                        <target>1.7</target> <!-- 需要生成的目标class文件的编译版本 -->
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins><!-- 该项目使用的插件列表 。 -->
            <!-- plugin元素包含描述插件所需要的信息。 -->
            <plugin>
                <groupId></groupId><!-- 插件在仓库里的group ID -->
                <artifactId></artifactId><!-- 插件在仓库里的artifact ID -->
                <version></version><!-- 被使用的插件的版本（或版本范围） -->
                <extensions>true</extensions><!-- 是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该
                                                        元素才被设置成enabled。 -->
                <executions><!-- 在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。该插件的某个goal的执行方式 -->
                    <execution><!-- execution元素包含了插件执行需要的信息 -->
                        <id></id><!-- 执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 -->
                        <phase></phase><!-- 绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段，插件的goal要嵌入到Maven的phase中执行，如verify -->
                        <goals></goals><!-- 配置的执行目标，要执行的插件的goal，如run -->
                        <inherited>true/false</inherited><!-- 配置是否被传播到子POM -->
                        <configuration></configuration><!-- 作为DOM对象的配置 -->
                    </execution>
                </executions>
                <dependencies><!-- 项目引入插件所需要的额外依赖 -->
                    <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <version>${mysql.version}</version>
                    </dependency>
                </dependencies>
                <inherited>true</inherited><!-- 任何配置是否被传播到子项目 -->
                <configuration></configuration><!-- 作为DOM对象的配置 -->
            </plugin>
        </plugins>
    </build>
	
    <reporting><!-- 该元素描述使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。 -->
        <excludeDefaults /><!-- true，则，网站不包括默认的报表。这包括“项目信息”菜单中的报表。 -->
        <outputDirectory /><!-- 所有产生的报表存放到哪里。默认值是${project.build.directory}/site。 -->
        <plugins><!-- 使用的报表插件和他们的配置。 -->
            <plugin><!-- plugin元素包含描述报表插件需要的信息 -->
                <groupId></groupId><!-- 报表插件在仓库里的group ID -->
                <artifactId></artifactId><!-- 报表插件在仓库里的artifact ID -->
                <version></version><!-- 被使用的报表插件的版本（或版本范围） -->
                <inherited>true/false</inherited><!-- 任何配置是否被传播到子项目 -->
                <configuration></configuration> <!-- 报表插件的配置 -->
                <!-- 一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，
                                     有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报
                                     表集，对应另一个执行目标 -->
                <reportSets>
                    <!-- 表示报表的一个集合，以及产生该集合的配置 -->
                    <reportSet>
                        <!-- 报表集合的唯一标识符，POM继承时用到 -->
                        <id></id>

                        <!-- 产生报表集合时，被使用的报表的配置 -->
                        <configuration></configuration>

                        <!-- 配置是否被继承到子POMs -->
                        <inherited>true/false</inherited>

                        <!-- 这个集合里使用到哪些报表 -->
                        <reports></reports>
                    </reportSet>
                </reportSets>
            </plugin>
        </plugins>
    </reporting>

    <!-- 环境设置 -->
    <profiles><!-- 在列的项目构建profile，如果被激活，会修改构建处理 -->
        <profile><!-- 根据环境参数或命令行参数激活某个构建处理 -->
            <id></id><!-- 构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。 -->
            <activation><!-- 自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它能够
                             在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元
                             素并不是激活profile的唯一方式。 -->
                <activeByDefault>true/false</activeByDefault><!-- profile默认是否激活的标志 -->
                <jdk>jdk版本，如:1.7</jdk><!-- 当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。 -->
                <os><!-- 当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。 -->
                    <!-- 激活profile的操作系统的名字 -->
                    <name> Windows XP </name>
                    <family> Windows </family><!-- 激活profile的操作系统所属家族(如 'windows') -->
                    <arch> x86 </arch><!-- 激活profile的操作系统体系结构 -->
                    <version> 5.1.2600 </version><!-- 激活profile的操作系统版本 -->
                </os>
                <property><!-- 如果Maven检测到某一个属性（其值可以在POM中通过${名称}引用），其拥有对应的名称和值，Profile
                               就会被激活。如果值字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹
                               配属性值字段 -->
                    <name> mavenVersion </name><!-- 激活profile的属性的名称 -->
                    <value> 2.0.3 </value><!-- 激活profile的属性的值 -->
                </property>
                <file><!-- 提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活
                           profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。 -->
                    <exists> /usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/ </exists><!-- 如果指定的文件存在，则激活profile。 -->
                    <missing> /usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/ </missing><!-- 如果指定的文件不存在，则激活profile。 -->
                </file>
            </activation>
            <build><!-- 构建项目所需要的信息。参见build元素 -->
                <defaultGoal />
                <resources>
                    <resource>
                        <targetPath></targetPath>
                        <filtering></filtering>
                        <directory></directory>
                        <includes>
                            <include></include>
                        </includes>
                        <excludes>
                            <exclude></exclude>
                        </excludes>
                    </resource>
                </resources>
                <testResources>
                    <testResource>
                        <targetPath></targetPath>
                        <filtering></filtering>
                        <directory></directory>
                        <includes>
                            <include></include>
                        </includes>
                        <excludes>
                            <exclude></exclude>
                        </excludes>
                    </testResource>
                </testResources>
                <directory></directory>
                <finalName></finalName>
                <filters></filters>
                <pluginManagement>
                    <plugins>
                        <!-- 参见build/pluginManagement/plugins/plugin元素 -->
                        <plugin>
                            <groupId></groupId>
                            <artifactId></artifactId>
                            <version></version>
                            <extensions>true/false</extensions>
                            <executions>
                                <execution>
                                    <id></id>
                                    <phase></phase>
                                    <goals></goals>
                                    <inherited>true/false</inherited>
                                    <configuration></configuration>
                                </execution>
                            </executions>
                            <dependencies>
                                <!-- 参见dependencies/dependency元素 -->
                                <dependency>
                                </dependency>
                            </dependencies>
                            <goals></goals>
                            <inherited>true/false</inherited>
                            <configuration></configuration>
                        </plugin>
                    </plugins>
                </pluginManagement>
                <plugins>
                    <!-- 参见build/pluginManagement/plugins/plugin元素 -->
                    <plugin>
                        <groupId></groupId>
                        <artifactId></artifactId>
                        <version></version>
                        <extensions>true/false</extensions>
                        <executions>
                            <execution>
                                <id></id>
                                <phase></phase>
                                <goals></goals>
                                <inherited>true/false</inherited>
                                <configuration></configuration>
                            </execution>
                        </executions>
                        <dependencies>
                            <!-- 参见dependencies/dependency元素 -->
                            <dependency>
                            </dependency>
                        </dependencies>
                        <goals></goals>
                        <inherited>true/false</inherited>
                        <configuration></configuration>
                    </plugin>
                </plugins>
            </build>
            <modules><!-- 模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 -->
                <module></module><!--子项目相对路径-->
            </modules>
            <repositories><!-- 发现依赖和扩展的远程仓库列表。 -->
                <repository><!-- 参见repositories/repository元素 -->
                    <releases>
                        <enabled><enabled>
                        <updatePolicy></updatePolicy>
                        <checksumPolicy></checksumPolicy>
                    </releases>
                    <snapshots>
                        <enabled><enabled>
                        <updatePolicy></updatePolicy>
                        <checksumPolicy></checksumPolicy>
                    </snapshots>
                    <id></id>
                    <name></name>
                    <url></url>
                    <layout></layout>
                </repository>
            </repositories>
            <pluginRepositories><!-- 发现插件的远程仓库列表，这些插件用于构建和报表 -->
                <pluginRepository><!-- 包含需要连接到远程插件仓库的信息.参见repositories/repository元素 -->
                    <releases>
                        <enabled><enabled>
                        <updatePolicy></updatePolicy>
                        <checksumPolicy></checksumPolicy>
                    </releases>
                    <snapshots>
                        <enabled><enabled>
                        <updatePolicy></updatePolicy>
                        <checksumPolicy></checksumPolicy>
                    </snapshots>
                    <id></id>
                    <name></name>
                    <url></url>
                    <layout></layout>
                </pluginRepository>
            </pluginRepositories>
            <dependencies><!-- 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的
                               仓库中下载。要获取更多信息，请看项目依赖机制。 -->
                <dependency><!-- 参见dependencies/dependency元素 -->
                </dependency>
            </dependencies>
            <reports></reports> <!-- 不赞成使用. 现在Maven忽略该元素. -->
            <reporting></reporting><!-- 该元素包括使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。参见reporting元素 -->
            <dependencyManagement><!-- 参见dependencyManagement元素 -->
                <dependencies>
                    <dependency><!-- 参见dependencies/dependency元素 -->
                    </dependency>
                </dependencies>
            </dependencyManagement>
            <distributionManagement><!-- 参见distributionManagement元素 -->
            </distributionManagement>
            <properties /><!-- 参见properties元素 -->
        </profile>
    </profiles>
    <issueManagement><!-- 项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira -->
        <system> jira </system> <!-- 问题管理系统（例如jira）的名字 -->
        <url> http://jira.baidu.com/banseon </url> <!-- 该项目使用的问题管理系统的URL -->
    </issueManagement>
    <ciManagement><!-- 项目持续集成信息 -->
        <system></system> <!-- 持续集成系统的名字，例如continuum -->
        <url></url> <!-- 该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。 -->
        <notifiers> <!-- 构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） -->
            <notifier> <!-- 配置一种方式，当构建中断时，以该方式通知用户/开发者 -->
                <type></type> <!-- 传送通知的途径 -->
                <sendOnError></sendOnError> <!-- 发生错误时是否通知 -->
                <sendOnFailure></sendOnFailure> <!-- 构建失败时是否通知 -->
                <sendOnSuccess></sendOnSuccess> <!-- 构建成功时是否通知 -->
                <sendOnWarning></sendOnWarning> <!-- 发生警告时是否通知 -->
                <address></address> <!-- 不赞成使用。通知发送到哪里 -->
                <configuration></configuration><!-- 扩展配置项 -->
            </notifier>
        </notifiers>
    </ciManagement>
    <mailingLists> <!-- 项目相关邮件列表信息 -->
        <mailingList> <!-- 该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。 -->
            <name> Demo </name> <!-- 邮件的名称 -->
            <post> banseon@126.com </post> <!-- 发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 -->
            <subscribe> banseon@126.com </subscribe> <!-- 订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 -->
            <unsubscribe> banseon@126.com </unsubscribe> <!-- 取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 -->
            <archive> http:/hi.baidu.com/banseon/demo/dev/ </archive> <!-- 你可以浏览邮件信息的URL -->
        </mailingList>
    </mailingLists>
    <scm> <!-- SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。 -->
        <connection><!-- SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。 -->
            scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk)
        </connection>
        <developerConnection><!-- 给开发者使用的，类似connection元素。即该连接不仅仅只读 -->
            scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk
        </developerConnection>
        <tag></tag><!-- 当前代码的标签，在开发阶段默认为HEAD -->
        <url> http://svn.baidu.com/banseon </url><!-- 指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。 -->
    </scm>
    <prerequisites><!-- 描述了这个项目构建环境中的前提条件。 -->
        <!-- 构建该项目或使用该插件所需要的Maven的最低版本 -->
        <maven></maven>
    </prerequisites>
    <repositories><!-- 发现依赖和扩展的远程仓库列表。 -->
        <repository><!-- 包含需要连接到远程仓库的信息 -->
            <releases><!-- 如何处理远程仓库里发布版本的下载 -->
                <enabled><enabled><!-- true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 -->
                <updatePolicy></updatePolicy><!-- 该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），
                                                  daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 -->
                <checksumPolicy></checksumPolicy><!-- 当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。 -->
            </releases>
            <snapshots><!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，
                            为每种类型的构件采取不同的策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 -->
                <enabled><enabled>
                <updatePolicy></updatePolicy>
                <checksumPolicy></checksumPolicy>
            </snapshots>
            <id> banseon-repository-proxy </id><!-- 远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库 -->
            <name> banseon-repository-proxy </name><!-- 远程仓库名称 -->
            <url> http://192.168.1.169:9999/repository/ </url><!-- 远程仓库URL，按protocol://hostname/path形式 -->
            <layout> default </layout><!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认
                                           的布局；然而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 -->
        </repository>
    </repositories>
    <pluginRepositories><!-- 发现插件的远程仓库列表，这些插件用于构建和报表 -->
        <!-- 包含需要连接到远程插件仓库的信息.参见repositories/repository元素 -->
        <pluginRepository>
        </pluginRepository>
    </pluginRepositories>
	
    <distributionManagement><!-- 项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。 -->
        <repository><!-- 部署项目产生的构件到远程仓库需要的信息 -->
            <!-- 是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见
                 repositories/repository元素 -->
            <uniqueVersion />
            <id> banseon-maven2 </id>
            <name> banseon maven2 </name>
            <url> file://${basedir}/target/deploy </url>
            <layout></layout>
        </repository>
        <!-- 构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见
             distributionManagement/repository元素 -->
        <snapshotRepository>
            <uniqueVersion />
            <id> banseon-maven2 </id>
            <name> Banseon-maven2 Snapshot Repository </name>
            <url> scp://svn.baidu.com/banseon:/usr/local/maven-snapshot </url>
            <layout></layout>
        </snapshotRepository>
        <site><!-- 部署项目的网站需要的信息 -->
            <id> banseon-site </id><!-- 部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置 -->
            <name> business api website </name><!-- 部署位置的名称 -->
            <url><!-- 部署位置的URL，按protocol://hostname/path形式 -->
                scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web
            </url>
        </site>
        <!-- 项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位
             那些不在仓库里的构件（由于license限制）。 -->
        <downloadUrl />
        <relocation><!-- 如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。 -->
            <groupId></groupId><!-- 构件新的group ID -->
            <artifactId></artifactId><!-- 构件新的artifact ID -->
            <version></version><!-- 构件新的版本号 -->
            <message></message><!-- 显示给用户的，关于移动的额外信息，例如原因。 -->
        </relocation>
        <!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值
             有：none（默认），converted（仓库管理员从Maven 1 POM转换过来），partner（直接从伙伴Maven
             2仓库同步过来），deployed（从Maven 2实例部署），verified（被核实时正确的和最终的）。 -->
        <status></status>
    </distributionManagement>

    <!-- 项目信息设置 -->
    <name> xxx-maven </name> <!-- 项目的名称, Maven产生的文档用 -->
    <url> http://maven.apache.org </url> <!-- 项目主页的URL, Maven产生的文档用 -->
    <description> A maven project to study maven. </description> <!-- 项目的详细描述, Maven 产生的文档用。 当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，
                                                                 就可以包含HTML标签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的
                                                                 索引页文件，而不是调整这里的文档。 -->
    <developers> <!-- 项目开发者列表 -->
        <developer> <!-- 某个项目开发者的信息 -->
            <id> HELLO WORLD </id> <!-- SCM里项目开发者的唯一标识符 -->
            <name> banseon </name> <!-- 项目开发者的全名 -->
            <email> banseon@126.com </email> <!-- 项目开发者的email -->
            <url></url> <!-- 项目开发者的主页的URL -->
            <roles><!-- 项目开发者在项目中扮演的角色，角色元素描述了各种角色 -->
                <role> Project Manager </role>
                <role> Architect </role>
            </roles>
            <organization> demo </organization> <!-- 项目开发者所属组织 -->
            <organizationUrl> http://hi.baidu.com/xxx </organizationUrl> <!-- 项目开发者所属组织的URL -->
            <properties> <!-- 项目开发者属性，如即时消息如何处理等 -->
                <dept> No </dept>
            </properties>
            <timezone> -5 </timezone> <!-- 项目开发者所在时区， -11到12范围内的整数。 -->
        </developer>
    </developers>
    <contributors><!-- 项目的其他贡献者列表 -->
        <contributor><!-- 项目的其他贡献者。参见developers/developer元素 -->
            <name></name> <!-- 项目贡献者的全名 -->
            <email></email><!-- 项目贡献者的email -->
            <url></url> <!-- 项目贡献者的主页的URL -->
            <organization></organization> <!-- 项目贡献者所属组织 -->
            <organizationUrl></organizationUrl> <!-- 项目贡献者所属组织的URL -->
            <roles> <!-- 项目贡献者在项目中扮演的角色，角色元素描述了各种角色 -->
                <role> Project Manager </role>
                <role> Architect </role>
            </roles>
            <timezone></timezone> <!-- 项目贡献者所在时区， -11到12范围内的整数。 -->
            <properties> <!-- 项目贡献者属性，如即时消息如何处理等 -->
                <dept> No </dept>
            </properties>
        </contributor>
    </contributors>
    <inceptionYear></inceptionYear>  <!-- 项目创建年份，4位数字。当产生版权信息时需要使用这个值。 -->
    <licenses><!-- 该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。
         如果列出多个license，用户可以选择它们中的一个而不是接受所有license。 -->
        <license> <!-- 描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。 -->
            <name> Apache 2 </name> <!-- license用于法律上的名称 -->
            <url> http://www.baidu.com/banseon/LICENSE-2.0.txt </url> <!-- 官方的license正文页面的URL -->
            <!-- 项目分发的主要方式： repo，可以从Maven库下载
                                    manual， 用户必须手动下载和安装依赖 -->
            <distribution> repo </distribution>
            <comments> A business-friendly OSS license </comments><!-- 关于license的补充信息 -->
        </license>
    </licenses>
    <organization> <!-- 描述项目所属组织的各种属性。Maven产生的文档用 -->
        <name> demo </name> <!-- 组织的全名 -->
        <url> http://www.baidu.com/banseon </url> <!-- 组织主页的URL -->
    </organization>
</project>